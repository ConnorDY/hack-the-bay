{"version":3,"sources":["services/api.js","components/Chart/index.js","components/Chart/Chart.jsx","dictionaries/parameter-dict.js","App.jsx","serviceWorker.js","index.jsx"],"names":["getDataMap","a","axios","get","data","getData","fips","year","parameter","getDataForYears","startYear","endYear","yearPromises","push","Promise","all","years","flatten","Chart","useState","setData","ticks","setTicks","units","setUnits","left","setLeft","right","setRight","refAreaLeft","setRefAreaLeft","refAreaRight","setRefAreaRight","yearTicks","determineUnits","rawData","prepareData","_data","map","MeasureValue","SampleDate","SampleTime","value","time","Date","substring","getTime","sort","b","Unit","useEffect","fetchData","length","_ticks","d3","domain","every","determineTicks","width","height","onMouseDown","e","activeLabel","onMouseMove","onMouseUp","type","dataKey","stroke","dot","connectNulls","name","scale","tickFormatter","angle","textAnchor","interval","allowDataOverflow","unit","padding","top","bottom","labelFormatter","x1","x2","strokeOpacity","onClick","CHLA","CLW","DIN","DO","DO_SAT_P","DOC","DON","DOP","HARDNESS","IBOD5W","NH4F","NH4W","NO2F","NO23F","NO3F","PC","PH","PHEO","PN","PO4F","PP","SALINITY","SECCHI","SIGMA_T","SPCOND","TALK","TDN","TDP","TN","TON","TP","TSS","TURB_NTU","WTEMP","App","dataMap","setDataMap","setFips","setParameter","setStartYear","setEndYear","fetchDataMap","htmlFor","id","onChange","target","Object","keys","key","disabled","parameterDictionary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5e8767c.chunk.js","sourcesContent":["import axios from 'axios';\nimport flatten from 'lodash.flatten';\n\nexport async function getDataMap() {\n  return (await axios.get(`./data/map.json`)).data;\n}\n\nexport async function getData(fips, year, parameter) {\n  return (await axios.get(`./data/${fips}/${year}/${parameter}/data.json`))\n    .data;\n}\n\nexport async function getDataForYears(fips, parameter, startYear, endYear) {\n  const yearPromises = [];\n  for (let year = startYear; year <= endYear; year++) {\n    yearPromises.push(getData(fips, year, parameter));\n  }\n\n  const years = await Promise.all(yearPromises);\n  return flatten(years);\n}\n","import Chart from './Chart';\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ReferenceArea,\n} from 'recharts';\nimport * as d3 from 'd3';\n\nimport { getDataForYears } from '../../services/api';\n\nexport default function Chart({ fips, parameter, startYear, endYear }) {\n  const [data, setData] = useState([]);\n\n  const [ticks, setTicks] = useState([]);\n  const [units, setUnits] = useState();\n\n  const [left, setLeft] = useState('dataMin');\n  const [right, setRight] = useState('dataMax');\n  const [refAreaLeft, setRefAreaLeft] = useState('');\n  const [refAreaRight, setRefAreaRight] = useState('');\n\n  /**\n   * TODO:\n   * Use left and right here if they aren't 'dataMin' and 'dataMax'.\n   * This way they will have an effect on the ticks when zooming in.\n   */\n  const years = endYear - startYear + 1;\n  const yearTicks = years >= 3;\n\n  async function fetchData() {\n    const rawData = await getDataForYears(fips, parameter, startYear, endYear);\n    determineUnits(rawData);\n    prepareData(rawData);\n  }\n\n  function prepareData(rawData) {\n    const _data = rawData\n      .map(({ MeasureValue, SampleDate, SampleTime }) => ({\n        value: MeasureValue,\n        // create date from ISO 8601 date string\n        time: new Date(\n          `${SampleDate.substring(0, 10)}T${SampleTime}Z`\n        ).getTime(),\n      }))\n      // sort by date\n      .sort((a, b) => a.time - b.time);\n\n    setData(_data);\n  }\n\n  function determineTicks() {\n    const domain = d3\n      .scaleTime()\n      .domain([\n        left !== 'dataMin' ? left : data[0].time,\n        data[data.length - 1].time,\n      ]);\n\n    const _ticks = domain.ticks(\n      yearTicks ? d3.timeYear.every(1) : d3.timeMonth.every(years)\n    );\n\n    setTicks(_ticks);\n  }\n\n  function determineUnits(rawData) {\n    setUnits(rawData[0].Unit);\n  }\n\n  function zoom() {\n    if (refAreaLeft === refAreaRight || refAreaRight === '') {\n      setRefAreaLeft('');\n      setRefAreaRight('');\n      return;\n    }\n\n    // xAxis domain\n    if (refAreaLeft > refAreaRight) {\n      setLeft(refAreaRight);\n      setRight(refAreaLeft);\n    } else {\n      setLeft(refAreaLeft);\n      setRight(refAreaRight);\n    }\n    setRefAreaLeft('');\n    setRefAreaRight('');\n  }\n\n  function zoomOut() {\n    setLeft('dataMin');\n    setRight('dataMax');\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [fips, parameter, startYear, endYear]);\n\n  useEffect(() => {\n    if (data.length) determineTicks();\n  }, [data, left, right]);\n\n  return data.length && ticks.length ? (\n    <>\n      <LineChart\n        width={600}\n        height={400}\n        data={data}\n        onMouseDown={(e) => e && e.activeLabel && setRefAreaLeft(e.activeLabel)}\n        onMouseMove={(e) =>\n          e && e.activeLabel && refAreaLeft && setRefAreaRight(e.activeLabel)\n        }\n        onMouseUp={zoom}\n      >\n        <Line\n          type=\"monotone\"\n          dataKey=\"value\"\n          stroke=\"#8884d8\"\n          dot={false}\n          connectNulls\n        />\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis\n          name=\"Time\"\n          dataKey=\"time\"\n          type=\"number\"\n          scale=\"time\"\n          domain={[left, right]}\n          ticks={ticks}\n          tickFormatter={(time) => d3.timeFormat('%B %Y')(time)}\n          angle={-45}\n          textAnchor=\"end\"\n          interval={0}\n          height={85}\n          allowDataOverflow\n        />\n        <YAxis\n          name={units}\n          unit={` ${units}`}\n          domain={['dataMin', 'dataMax']}\n          padding={{ top: 20, bottom: 20 }}\n          allowDataOverflow\n        />\n        <Tooltip\n          labelFormatter={(time) => `date: ${d3.timeFormat('%m/%d/%Y')(time)}`}\n        />\n        {refAreaLeft && refAreaRight ? (\n          <ReferenceArea\n            x1={refAreaLeft}\n            x2={refAreaRight}\n            strokeOpacity={0.3}\n          />\n        ) : null}\n      </LineChart>\n      {left !== 'dataMin' ? <button onClick={zoomOut}>Zoom Out</button> : null}\n    </>\n  ) : (\n    <>{/* TODO: add spinner */}</>\n  );\n}\n","export default {\n  CHLA: 'Chlorophyll A',\n  CLW: 'Cloud Liquid Water',\n  DIN: 'Dissolved Inorganic Nitrogen',\n  DO: 'Dissolved Oxygen',\n  DO_SAT_P: 'Dissolved Oxygen Saturation %',\n  DOC: 'Dissolved Organic Carbon',\n  DON: 'Dissolved Organic Nitrogen',\n  DOP: 'Dissolved Organic Phosphorus',\n  HARDNESS: 'Water Hardness',\n  IBOD5W: 'Inhibited 5-Day Biochemical Oxygen Demand (Whole Sample)',\n  NH4F: 'Ammonium Fluoride',\n  NH4W: 'Ammonium Nitrogen',\n  NO2F: 'Nitrite Nitrogen',\n  NO23F: 'Nitrite+Nitrate Nitrogen',\n  NO3F: 'Nitrate Nitrogen',\n  PC: 'Particulate Carbon',\n  PH: 'pH',\n  PHEO: 'Pheophytin',\n  PN: 'Particulate Nitrogen',\n  PO4F: 'Orthophosphate Phosphorus (Filtered Sample)',\n  PP: 'Particulate Phosphorus',\n  SALINITY: 'Salinity',\n  SECCHI: 'Secchi Disk (Water Transparency)',\n  SIGMA_T: 'Sigma-t (Water Density)',\n  SPCOND: 'Specific Conductance',\n  TALK: 'Total Alkalinity',\n  TDN: 'Total Dissolved Nitrogen',\n  TDP: 'Total Dissolved Phosphorus',\n  TN: 'Total Nitrogen',\n  TON: 'Total Organic Nitrogen',\n  TP: 'Total Phosphorus',\n  TSS: 'Total Suspended Solids',\n  TURB_NTU: 'Turbidity (NTU)',\n  WTEMP: 'Water Temperature',\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { Chart } from './components';\nimport { getDataMap } from './services/api';\nimport { parameterDictionary } from './dictionaries';\n\nfunction App() {\n  const [dataMap, setDataMap] = useState();\n  const [fips, setFips] = useState('10001');\n  const [parameter, setParameter] = useState('PH');\n  const [startYear, setStartYear] = useState(2015);\n  const [endYear, setEndYear] = useState(2019);\n\n  async function fetchDataMap() {\n    setDataMap(await getDataMap());\n  }\n\n  useEffect(() => {\n    fetchDataMap();\n  }, []);\n\n  return dataMap ? (\n    <>\n      <form>\n        <div>\n          <label htmlFor=\"fips\">FIPS:</label>{' '}\n          <select\n            id=\"fips\"\n            value={fips}\n            onChange={(e) => setFips(e.target.value)}\n          >\n            {Object.keys(dataMap).map((key) => (\n              <option key={key}>{key}</option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"startYear\">Start Year:</label>{' '}\n          <select\n            id=\"startYear\"\n            value={startYear}\n            onChange={(e) => setStartYear(e.target.value)}\n          >\n            {Object.keys(dataMap[fips]).map((key) => (\n              <option disabled={key > endYear} key={key}>\n                {key}\n              </option>\n            ))}\n          </select>{' '}\n          <label htmlFor=\"endYear\">End Year:</label>{' '}\n          <select\n            id=\"endYear\"\n            value={endYear}\n            onChange={(e) => setEndYear(e.target.value)}\n          >\n            {Object.keys(dataMap[fips]).map((key) => (\n              <option disabled={key < startYear} key={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"parameter\">Parameter:</label>{' '}\n          <select\n            id=\"parameter\"\n            value={parameter}\n            onChange={(e) => setParameter(e.target.value)}\n          >\n            {dataMap[fips][startYear].map((key) => (\n              <option value={key} key={key}>\n                {parameterDictionary[key] ? parameterDictionary[key] : key}\n              </option>\n            ))}\n          </select>\n        </div>\n      </form>\n\n      <h2>\n        {parameterDictionary[parameter]\n          ? parameterDictionary[parameter]\n          : parameter}{' '}\n        over Time\n      </h2>\n      <Chart\n        fips={fips}\n        parameter={parameter}\n        startYear={startYear}\n        endYear={endYear}\n      />\n    </>\n  ) : (\n    <>{/* TODO: add spinner */}</>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}