{"version":3,"sources":["services/api.js","components/Chart/index.js","components/Chart/Chart.jsx","dictionaries/parameter-dict.js","App.jsx","serviceWorker.js","index.jsx"],"names":["getDataMap","a","axios","get","data","getData","fips","year","parameter","Chart","useState","setData","ticks","setTicks","units","setUnits","determineUnits","rawData","prepareData","_data","map","MeasureValue","SampleDate","SampleTime","value","time","Date","substring","getTime","sort","b","_ticks","d3","domain","length","every","Unit","useEffect","fetchData","width","height","type","dataKey","stroke","dot","connectNulls","name","scale","tickFormatter","unit","padding","top","bottom","labelFormatter","CHLA","CLW","DIN","DO","DO_SAT_P","DOC","DON","DOP","HARDNESS","IBOD5W","NH4F","NH4W","NO2F","NO23F","NO3F","PC","PH","PHEO","PN","PO4F","PP","SALINITY","SECCHI","SIGMA_T","SPCOND","TALK","TDN","TDP","TN","TON","TP","TSS","TURB_NTU","WTEMP","App","dataMap","setDataMap","setFips","setParameter","setYear","fetchDataMap","htmlFor","id","onChange","e","target","Object","keys","key","parameterDictionary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4de62f95.chunk.js","sourcesContent":["import axios from 'axios';\nimport flatten from 'lodash.flatten';\n\nexport async function getDataMap() {\n  return (await axios.get(`./data/map.json`)).data;\n}\n\nexport async function getData(fips, year, parameter) {\n  return (await axios.get(`./data/${fips}/${year}/${parameter}/data.json`))\n    .data;\n}\n\nexport async function getDataForYears(fips, parameter, yearStart, yearEnd) {\n  const yearPromises = [];\n  for (let year = yearStart; year <= yearEnd; year++) {\n    yearPromises.push(getData(fips, year, parameter));\n  }\n\n  const years = await Promise.all(yearPromises);\n  return flatten(years);\n}\n","import Chart from './Chart';\n\nexport default Chart;\n","import React, { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from 'recharts';\nimport * as d3 from 'd3';\n\nimport { getData } from '../../services/api';\n\nexport default function Chart({ fips, parameter, year }) {\n  const [data, setData] = useState([]);\n  const [ticks, setTicks] = useState([]);\n  const [units, setUnits] = useState();\n\n  async function fetchData() {\n    const rawData = await getData(fips, year, parameter);\n    determineUnits(rawData);\n    prepareData(rawData);\n  }\n\n  function prepareData(rawData) {\n    const _data = rawData\n      .map(({ MeasureValue, SampleDate, SampleTime }) => ({\n        value: MeasureValue,\n        // create date from ISO 8601 date string\n        time: new Date(\n          `${SampleDate.substring(0, 10)}T${SampleTime}Z`\n        ).getTime(),\n      }))\n      // sort by date\n      .sort((a, b) => a.time - b.time);\n\n    const domain = d3\n      .scaleTime()\n      .domain([_data[0].time, _data[_data.length - 1].time]);\n\n    const _ticks = domain.ticks(d3.timeMonth.every(1));\n\n    setData(_data);\n    setTicks(_ticks);\n  }\n\n  function determineUnits(rawData) {\n    setUnits(rawData[0].Unit);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [fips, parameter, year]);\n\n  return data.length && ticks.length ? (\n    <LineChart width={600} height={300} data={data}>\n      <Line\n        type=\"monotone\"\n        dataKey=\"value\"\n        stroke=\"#8884d8\"\n        dot={false}\n        connectNulls\n      />\n      <CartesianGrid stroke=\"#ccc\" />\n      <XAxis\n        name=\"Time\"\n        dataKey=\"time\"\n        type=\"number\"\n        scale=\"time\"\n        domain={['dataMin', 'dataMax']}\n        ticks={ticks}\n        tickFormatter={(time) => d3.timeFormat('%B %Y')(time)}\n      />\n      <YAxis\n        name={units}\n        unit={` ${units}`}\n        domain={['dataMin', 'dataMax']}\n        padding={{ top: 20, bottom: 20 }}\n      />\n      <Tooltip\n        labelFormatter={(time) => `date: ${d3.timeFormat('%m/%d/%Y')(time)}`}\n      />\n    </LineChart>\n  ) : (\n    <>{/* TODO: add spinner */}</>\n  );\n}\n","export default {\n  CHLA: 'Chlorophyll A',\n  CLW: 'Cloud Liquid Water',\n  DIN: 'Dissolved Inorganic Nitrogen',\n  DO: 'Dissolved Oxygen',\n  DO_SAT_P: 'Dissolved Oxygen Saturation %',\n  DOC: 'Dissolved Organic Carbon',\n  DON: 'Dissolved Organic Nitrogen',\n  DOP: 'Dissolved Organic Phosphorus',\n  HARDNESS: 'Water Hardness',\n  IBOD5W: 'Inhibited 5-Day Biochemical Oxygen Demand (Whole Sample)',\n  NH4F: 'Ammonium Fluoride',\n  NH4W: 'Ammonium Nitrogen',\n  NO2F: 'Nitrite Nitrogen',\n  NO23F: 'Nitrite+Nitrate Nitrogen',\n  NO3F: 'Nitrate Nitrogen',\n  PC: 'Particulate Carbon',\n  PH: 'pH',\n  PHEO: 'Pheophytin',\n  PN: 'Particulate Nitrogen',\n  PO4F: 'Orthophosphate Phosphorus (Filtered Sample)',\n  PP: 'Particulate Phosphorus',\n  SALINITY: 'Salinity',\n  SECCHI: 'Secchi Disk (Water Transparency)',\n  SIGMA_T: 'Sigma-t (Water Density)',\n  SPCOND: 'Specific Conductance',\n  TALK: 'Total Alkalinity',\n  TDN: 'Total Dissolved Nitrogen',\n  TDP: 'Total Dissolved Phosphorus',\n  TN: 'Total Nitrogen',\n  TON: 'Total Organic Nitrogen',\n  TP: 'Total Phosphorus',\n  TSS: 'Total Suspended Solids',\n  TURB_NTU: 'Turbidity (NTU)',\n  WTEMP: 'Water Temperature',\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { Chart } from './components';\nimport { getDataMap } from './services/api';\nimport { parameterDictionary } from './dictionaries';\n\nfunction App() {\n  const [dataMap, setDataMap] = useState();\n  const [fips, setFips] = useState('10001');\n  const [parameter, setParameter] = useState('PH');\n  const [year, setYear] = useState(2019);\n\n  async function fetchDataMap() {\n    setDataMap(await getDataMap());\n  }\n\n  useEffect(() => {\n    fetchDataMap();\n  }, []);\n\n  return dataMap ? (\n    <>\n      <form>\n        <div>\n          <label htmlFor=\"fips\">FIPS:</label>{' '}\n          <select\n            id=\"fips\"\n            value={fips}\n            onChange={(e) => setFips(e.target.value)}\n          >\n            {Object.keys(dataMap).map((key) => (\n              <option key={key}>{key}</option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"year\">Year:</label>{' '}\n          <select\n            id=\"year\"\n            value={year}\n            onChange={(e) => setYear(e.target.value)}\n          >\n            {Object.keys(dataMap[fips]).map((key) => (\n              <option key={key}>{key}</option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"parameter\">Parameter:</label>{' '}\n          <select\n            id=\"parameter\"\n            value={parameter}\n            onChange={(e) => setParameter(e.target.value)}\n          >\n            {dataMap[fips][year].map((key) => (\n              <option value={key} key={key}>\n                {parameterDictionary[key] ? parameterDictionary[key] : key}\n              </option>\n            ))}\n          </select>\n        </div>\n      </form>\n\n      <h2>\n        {parameterDictionary[parameter]\n          ? parameterDictionary[parameter]\n          : parameter}{' '}\n        over Time\n      </h2>\n      <Chart fips={fips} parameter={parameter} year={year} />\n    </>\n  ) : (\n    <>{/* TODO: add spinner */}</>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}